{"version":3,"sources":["js/dashboard-components/Header.js","js/dashboard-components/Sidebar.js","js/AddChannel.js","js/AddMember.js","js/Channel.js","js/DirectMessage.js","js/Welcome.js","js/AlertWindow.js","js/dashboard-components/Maincontent.js","js/Dashboard.js","js/Login.js","js/Signup.js","js/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Header","greetings","mobileView","setShowMenu","showMenu","console","log","className","onClick","Sidebar","props","setActivePage","userHeaders","value","setChannelName","setChannelID","setListOfMessages","setRecipientName","setRecipientID","counter","setCounter","counter2","setCounter2","currentUser","setCurrentUser","useState","usersChannelVisible","setUsersChannelVisible","usersDirectMessagesVisible","setUsersDirectMessagesVisible","addButtonVisible","setAddButtonVisible","listOfChannels","setListOfChannels","setListOfChannelID","objectChannel","setObjectChannel","noChannels","setNoChannels","noUsersInList","setNoUsersInList","loading","setLoading","loading1","setLoading1","searchUser","setSearchUser","searchEmails","setSearchEmails","allUsersStored","setAllUsersStored","usersInChannels","userEmailsInChannels","retrieveUserChannels","a","fetch","method","headers","mode","then","response","json","userChannels","undefined","data","userChannelsName","map","name","userChannelsID","id","i","tempObjectChannel","forEach","channelName","catch","error","showChannel","e","targetChannel","target","innerHTML","channelID","channelDetails","channel_members","member","includes","user_id","push","loadAllUsers","returnedArray","allUsers","allUsersData","item","email","uniq","Set","OpenDMWindow","trgtMember","useEffect","onMouseEnter","onMouseLeave","channel","type","placeholder","onChange","event","index","toLowerCase","AddChannel","userId","setValue","setAlertMessage","setAlertWindowVisible","body","JSON","stringify","errors","AddMember","accountID","setAccountID","addUser","Channel","listOfMessages","message","setMessage","endOfMessages","useRef","sendMessage","retrieveMessages","length","messagesData","tempListOfMessages","interval","setInterval","clearInterval","current","scrollIntoView","behavior","scrollToBottom","sender","uid","ref","onKeyPress","key","preventDefault","onKeyHandleSentMessage","DirectMessage","recipientName","recipientID","endOfMessages2","class","Welcome","history","useHistory","AlertWindow","alertMessage","alertWindowVisible","Maincontent","activePage","Dashboard","parse","localStorage","getItem","Object","keys","to","query","matches","Login","emailLogInInput","passwordLogInput","logInReminder","setLogInReminder","logInVisiblity","onTransition","setLogInVisibility","signUpVisibity","setSignUpVisibility","headersList","user","userData","status","head","Array","from","entries","reduce","pair","classname","src","alt","action","defaultValue","htmlFor","autoComplete","required","Signup","emailSignUpInput","passwordSignUpInput","confirmSignUpInput","signUpReminder","setSignUpReminder","setHomeState","signUpVisibility","registerUser","password","setTimeout","state","buttonText","captionText","transitionClass","focus","full_messages","onSignupEnter","Home","signupState","transitionClass2","loginState","homeState","App","localStorageCurrentUser","currentUserData","setItem","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f388c00.chunk.js","sourcesContent":["function Header({greetings,mobileView,setShowMenu,showMenu}) {\n\n\n    function showNav(){\n        if(showMenu===false){\n            setShowMenu(true)\n        }else {\n            setShowMenu(false)\n        }\n    }\n\n    console.log(greetings)\n    return (\n        \n        <div className={`bg-purple-800 text-white font-bold flex ${!mobileView ? \"justify-left\" : \"justify-between\" } p-3`}>\n            <span className=\"text-3xl mx-3\">aChat</span>\n            {mobileView && <span className=\"cursor-pointer text-3xl mx-3\" onClick={showNav}> ☰ </span>}\n            {!mobileView && <span className=\"text-xl self-center mr-0 ml-auto\">{greetings}</span>}\n            \n        </div>\n    \n    )\n}\n\nexport default Header\n","import { data } from 'autoprefixer'\nimport {useState,useEffect} from 'react'\n\nfunction Sidebar(props) {\n\n    const {greetings,setActivePage,userHeaders,value,setChannelName,setChannelID,setListOfMessages, setRecipientName, setRecipientID, counter, setCounter,mobileView,showMenu,setShowMenu, counter2, setCounter2, currentUser, setCurrentUser} = props\n    const [usersChannelVisible, setUsersChannelVisible] = useState(false)\n    const [usersDirectMessagesVisible, setUsersDirectMessagesVisible] = useState(false) //renders list of users\n    const [addButtonVisible, setAddButtonVisible] = useState(false)\n    const [listOfChannels,setListOfChannels] = useState([])\n    const [listOfChannelID,setListOfChannelID] = useState([])\n    const [objectChannel,setObjectChannel] = useState({})\n    const [noChannels,setNoChannels] = useState()\n    const [noUsersInList, setNoUsersInList] = useState(true) //renders 'no users available' on direct messages in sidebar if set to true\n    const [loading,setLoading] = useState()\n    const [loading1,setLoading1] = useState() //renders 'fetching data' when data is not yet ready\n    const [searchUser,setSearchUser] = useState(\"\")//filters searchbar\n    const [searchEmails, setSearchEmails] = useState([])//array where searchbar can look for emails\n    const [allUsersStored, setAllUsersStored] = useState([]) // array where all users from fetch are stored\n    let usersInChannels = [] //array where user IDs of all members in user's channels are pushed\n    let userEmailsInChannels = [] //array where user emails are pushed based on user IDs\n\n    // userHeaders[`Content-Type`] =  \"application/json\"\n    // setCurrentUser({\n    //     ...currentUser,\n    //     headers: {\n    //         ...currentUser.headers,\n    //         \"Content-Type\":\"application/json\"\n    //     }\n    // })\n\n    async function retrieveUserChannels(){\n        setLoading(true)\n        await fetch(\"http://206.189.91.54/api/v1/channels\",\n            {method: \"GET\",\n            headers: userHeaders, \n            mode:\"cors\"})\n        .then(response=>response.json())\n        .then(userChannels=>{\n            if(userChannels.data!==undefined){\n                let userChannelsName = userChannels.data.map(data => \n                    data.name\n                )\n                setListOfChannels(userChannelsName)\n                let userChannelsID = userChannels.data.map(data => \n                    data.id\n                )\n                setListOfChannelID(userChannelsID)\n                \n                let i=0\n                let tempObjectChannel = {}\n\n                userChannelsName.forEach(channelName => {\n                    tempObjectChannel[channelName] = userChannelsID[i]\n                    i++\n                })\n\n                setObjectChannel(tempObjectChannel)\n\n                setNoChannels(false)\n                setLoading(false)\n            } else {\n                setLoading(false)\n                setNoChannels(true)\n            }\n        })\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    // updates list when a channel is added\n\n    useEffect( ()=>{\n        retrieveUserChannels()\n    },[value])\n\n    function showUsersChannel(){\n        if(usersChannelVisible===false){\n            retrieveUserChannels()\n            setUsersChannelVisible(true)\n        } else {\n            setUsersChannelVisible(false)\n        }\n    }\n\n    function showAddButton(){\n        setAddButtonVisible(true)\n    }\n\n    function hideAddButton(){\n        setAddButtonVisible(false)\n    }\n\n    // shows page where add channel is\n\n    function showAddChannel(){\n        setActivePage(\"AddChannel\")\n        setShowMenu(false)\n    }\n\n    async function showChannel(e){\n        setActivePage(\"Channel\")\n        setListOfMessages([])\n        const targetChannel = e.target.innerHTML\n        setChannelName(targetChannel)\n        setChannelID(objectChannel[targetChannel])\n        setCounter(counter+1)\n        setShowMenu(false)\n    }\n\n    function showWelcomePage(){\n        setActivePage(\"Welcome\")\n        setShowMenu(false)\n    }\n\n    // direct message functions\n\n    async function loadUsersFromChannel(){ // stores user IDs of all users in user's channels in an array\n        setLoading1(true)\n        await fetch(\"http://206.189.91.54/api/v1/channels\", //fetches all channels of user\n            {method: \"GET\",\n            headers: userHeaders, \n            mode:\"cors\"})\n        .then(response=>response.json())\n        .then(userChannels=>{\n            let userChannelsID = userChannels.data.map(data => data.id)\n                userChannelsID.map(channelID => \n                    fetch(`http://206.189.91.54/api/v1/channels/${channelID}`, //fetches the channel details via channel ID then collects all the user IDs\n                    {method: \"GET\",\n                    headers: userHeaders,\n                    mode: \"cors\"})\n                    .then(response=>response.json())\n                    .then(channelDetails => \n                        channelDetails.data.channel_members.map(member => {  //filters duplicate IDs then stores one of each unique ID in array\n                            if (usersInChannels.includes(member.user_id)) \n                            { return null } \n                            else {\n                                usersInChannels.push(member.user_id)\n                                let returnedArray = usersInChannels\n                                loadAllUsers(returnedArray)\n                            }\n                        }))\n                    )\n                })\n        .then(() => {\n            if (searchEmails !== (undefined||null)) {\n                setLoading1(false)\n                setNoUsersInList(false)}\n            else {\n                setLoading1(false)\n                setNoUsersInList(true)\n                }\n            })\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    async function loadAllUsers (returnedArray){ // fetches all users ID (to be used for cross reference)\n        await (fetch(\"http://206.189.91.54/api/v1/users\", \n        {method: \"GET\",\n        headers: userHeaders,\n        mode: \"cors\"}))\n        .then(response=>response.json())\n        .then(allUsers=>{\n            const allUsersData = allUsers.data.map(item=>item)\n            setAllUsersStored(allUsersData)\n\n            allUsers.data.map(item=> returnedArray.includes(item.id) ? \n            userEmailsInChannels.push(item.email) : null)\n        })\n        .then(()=>{\n            var uniq = [...new Set(userEmailsInChannels)] //replaces the duplicate values inside userEmailsInChannels\n            setSearchEmails(uniq)\n            })\n    }\n\n    // loads loadUsersFromChannel() only once upon rendering of Sidebar\n    useEffect(loadUsersFromChannel,[])\n\n    // shows list of user's DMs with other users\n\n    function showUsersDirectMessages(){\n        if(usersDirectMessagesVisible===false){\n            setUsersDirectMessagesVisible(true)\n        } else {\n            setUsersDirectMessagesVisible(false)\n        }\n    }\n\n        \n\n    async function OpenDMWindow(e) {\n        const trgtMember = e.target.innerHTML\n        setRecipientName(trgtMember)\n        setActivePage(\"DirectMessage\")\n        setListOfMessages([])\n        setCounter2(counter2+1)\n        allUsersStored.map(item=> item.email === trgtMember ? setRecipientID(item.id) : null)\n        setShowMenu(false)\n     }\n\n\n    return (\n        <div className={`bg-purple-900 text-white ${mobileView ? \"w-full absolute\" : \"w-2/12\"} ${mobileView && `${showMenu ? \"block\" : \"hidden\"}`} ${mobileView===false && \"block\"} max-h-90%\" `}>\n            \n            {mobileView && <span className=\"flex item-stretch justify-center font-semibold p-1 mt-4 mb-2\">{greetings}</span>}\n\n            <span className={`cursor-pointer flex item-stretch mx-4 font-semibold  ${mobileView ? \"justify-center text-2xl p-1\": \"justify-left text-lg p-4 mt-4\"}`} onClick={showWelcomePage}>Home</span>\n            \n            {(addButtonVisible===false&&!mobileView) &&\n            <>\n                <span className={`cursor-pointer flex item-stretch mx-4 font-semibold ${mobileView ? \"justify-center text-2xl p-1\": \"justify-left text-lg p-4\"}`} onMouseEnter={showAddButton}>Channels{usersChannelVisible===false ? <span>▴</span> : <span>▾</span>}</span>\n            </>\n            }\n\n            {(addButtonVisible || mobileView) &&\n            <>\n                <div className={`cursor-pointer flex ${mobileView ? \"justify-center text-2xl p-1\": \"justify-between text-lg p-4\"} mx-4 font-semibold`} onMouseLeave={hideAddButton}> \n                    <span onClick={showUsersChannel}>Channels{usersChannelVisible===false ? <span>▴</span> : <span>▾</span>}</span>\n                    <span onClick={showAddChannel}>+</span>\n                </div>\n            </>\n            }\n\n            {(loading && usersChannelVisible) &&\n            <>\n            <ul className=\"mx-10\">\n                    <li>Fetching Data</li>\n            </ul>\n            </>\n            }\n            \n            {(usersChannelVisible && noChannels===false && loading===false)&& \n                <ul className={`mx-10 ${mobileView && \"text-center text-xl\"} max-h-40 overflow-scroll no-scrollbar`}>\n                    {listOfChannels.map((channel,id) => <li key={id} className=\"cursor-pointer\" onClick={showChannel}>{channel}</li>)}\n                </ul>\n            }\n\n            {(usersChannelVisible && noChannels===true && loading===false)&& \n                <ul className=\"mx-10\">\n                    <li>No Available Channels</li>\n                </ul>\n            }\n\n            {/* direct messages */}\n\n            {\n                <>\n                    <div className={`cursor-pointer flex ${mobileView ? \"justify-center text-2xl p-1 mb-4\": \"justify-left text-lg p-4\"} mx-4 font-semibold`} > \n                        <span onClick={showUsersDirectMessages}>Direct Messages{usersDirectMessagesVisible===false ? <span>▴</span> : <span>▾</span>}</span>\n                    </div>\n                </>\n            }\n\n            {(loading1 && usersDirectMessagesVisible) &&\n                <>\n                    <ul className=\"mx-10\">\n                            <li>Fetching Data</li>\n                    </ul>\n                </>\n            }\n            \n            {(usersDirectMessagesVisible && noUsersInList===false && loading1===false)&& \n                <div className=\"flex justify-start flex-col items-center\">\n                    <input type=\"text\" placeholder=\"Search...\" onChange={event=>{setSearchUser(event.target.value)}} className={`w-1/2 text-black w-3/4 max-w-sm`}/>\n                    <ul className={`mx-10 ${mobileView && \"text-center mb-4\"} max-h-60 overflow-scroll no-scrollbar flex flex-col items-start`}>\n                        {searchEmails.map((item, index)=> {\n                            if (searchUser === '') {\n                                return <li onClick = {OpenDMWindow} key = {index}>{item}</li>\n                            }\n                            else if (item.toLowerCase().includes(searchUser.toLowerCase())) {\n                                return <li onClick = {OpenDMWindow} key = {index}>{item}</li>\n                            }\n                        })}\n                    </ul>\n                </div>\n            }\n\n            {(usersDirectMessagesVisible && noUsersInList===true && loading1===false)&& \n                <ul className=\"mx-10\">\n                    <li>No Available Users</li>\n                </ul>\n            }\n        </div>\n    )\n}\n\nexport default Sidebar\n","import {useState} from 'react'\n\nfunction AddChannel(props) {\n\n    const {userHeaders,userId,setValue,value,setAlertMessage,setAlertWindowVisible} = props\n    const [channelName,setChannelName] = useState(\"\")\n\n    userHeaders[`Content-Type`] =  \"application/json\"\n    \n    function handleChange(e) {\n        setChannelName(e.target.value)\n    }\n\n    async function handleClick() {\n\n        const body = {\n            \"name\": channelName,\n            \"user_ids\": [userId]\n        }\n\n        await fetch(\"http://206.189.91.54/api/v1/channels\",\n            {method: \"POST\",\n            headers: userHeaders, \n            mode: \"cors\",\n            body: JSON.stringify(body)})\n            .then(response=>response.json())\n            .then(data=>{\n                if(data.errors!==undefined){\n                    setAlertMessage(data.errors[0])\n                    setAlertWindowVisible(true)\n                } else {\n                    setChannelName(\"\")\n                    setAlertMessage(\"Channel created!\")\n                    setAlertWindowVisible(true)\n                    setValue(value+1)\n                }\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"text-center py-24\">\n            <h1 className=\"font-semibold text-3xl my-2\">Create a new channel</h1>\n            <fieldset>\n                <label className=\"my-2\">Channel name: </label>\n                <input className=\"my-2\" type=\"text\" onChange={handleChange} value={channelName}></input>\n            </fieldset>\n            <button onClick={handleClick} className=\"bg-purple-800 hover:bg-purple-900 text-white font-bold py-2 px-4 border border-purple-900 rounded my-2\">\n                Create Channel\n            </button>\n            \n        </div>\n    )\n}\n\nexport default AddChannel","import {useState} from 'react'\n\nfunction AddMember(props) {\n    const {channelID,userHeaders,setAlertMessage,setAlertWindowVisible} = props\n    const [accountID,setAccountID] = useState(\"\")\n\n    async function addUser(body){\n        await fetch(\"http://206.189.91.54/api/v1/channel/add_member\",\n            {method: \"POST\",\n            headers: userHeaders, \n            mode:\"cors\",\n            body: JSON.stringify(body)})\n        .then(response=>response.json())\n\n        .then(data=>{\n            if(typeof data.errors===\"string\"){\n                setAlertMessage(data.errors)\n                setAlertWindowVisible(true)\n            } else if (typeof data.errors===\"object\") {\n                setAlertMessage(data.errors[0])\n                setAlertWindowVisible(true)\n            } else if (data.errors===undefined) {\n                setAccountID(\"\")\n                setAlertMessage(\"User added successfuly!\")\n                setAlertWindowVisible(true)\n            }\n        })\n\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    function handleChange(e){\n        setAccountID(e.target.value)\n    }\n\n    function handleClick(){\n        const body={\n            \"id\": channelID,\n            \"member_id\": accountID\n        }\n        addUser(body)\n    }\n\n    return (\n        <div className=\"text-center py-5\">\n            <h1 className=\"font-semibold text-3xl my-2\">Add new member: </h1>\n            <fieldset>\n                <label className=\"my-2\">Account ID: </label>\n                <input className=\"my-2\" type=\"text\" onChange={handleChange} value={accountID}></input>\n            </fieldset>\n            <button onClick={handleClick} className=\"bg-purple-800 hover:bg-purple-900 text-white font-bold py-2 px-4 border border-purple-900 rounded my-2\">\n                Add Member\n            </button>\n            \n        </div>\n    )\n}\n\nexport default AddMember\n","import {useEffect,useRef,useState} from 'react'\n\nfunction Channel(props) {\n\n    const {channelName,channelID,listOfMessages,userHeaders,setListOfMessages,setActivePage, counter, setCounter, mobileView} = props\n    const [message,setMessage] = useState(\"\")\n    const [value,setValue] = useState(0)\n    const [loading,setLoading] = useState()\n    const endOfMessages = useRef(null)\n    \n\n    function handleClick(){\n        setActivePage(\"AddMember\")\n    }\n    \n    function handleChange(e){\n        setMessage(e.target.value)\n    }\n    \n    async function sendMessage(body){\n        await fetch(\"http://206.189.91.54/api/v1/messages\",\n            {method: \"POST\",\n            headers: userHeaders, \n            mode:\"cors\",\n            body: JSON.stringify(body)})\n        .then(response=>response.json())\n        .then(data=>{\n            setValue(value=>value+1)})\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    function handleSentMessage(){\n        const body={\n            \"receiver_id\": channelID,\n            \"receiver_class\": \"Channel\",\n            \"body\": message\n        }\n        sendMessage(body)\n        setMessage(\"\")\n    }\n\n    function onKeyHandleSentMessage(e){\n        if (e.key === \"Enter\"){\n            e.preventDefault()\n            const body={\n                \"receiver_id\": channelID,\n                \"receiver_class\": \"Channel\",\n                \"body\": message\n            }\n            sendMessage(body)\n            setMessage(\"\")\n        }\n    }\n\n    async function retrieveMessages(){\n        await fetch(`http://206.189.91.54/api/v1/messages?receiver_id=${channelID}&receiver_class=Channel`,\n        {method: \"GET\",\n        headers: userHeaders, \n        mode:\"cors\"})\n        .then(response=>response.json())\n        .then(data=> {\n            if(data.data.length!==0){\n                const messagesData = data.data\n                let tempListOfMessages = []\n                messagesData.forEach(message => {\n                    tempListOfMessages.push(message)\n                })\n                setListOfMessages(tempListOfMessages)\n\n            } else {\n                console.log(\"NO MESSAGES\")\n            }\n            setLoading(false)\n        })\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    useEffect( ()=>{\n        // removed these two lines so it doesnt look buggy when sending a message\n        // setListOfMessages([])\n        // setLoading(true)\n        retrieveMessages()\n    },[channelName,value])\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCounter(counter + 1)\n            retrieveMessages()\n        }, 5000);\n        return () => {\n          clearInterval(interval);\n        };\n      }, [counter]);\n\n    \n    const scrollToBottom = () => {\n        endOfMessages.current?.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    useEffect(()=>{\n        scrollToBottom()\n    },[listOfMessages])\n\n\n    return (\n        <div className=\"h-full flex flex-col justify-between max-h-90%\">\n            <div className=\"border-solid border-purple-300 border-2 bg-white p-3 flex justify-between\">\n                <span className={`font-bold ${mobileView ? \"text-xl\": \"text-3xl\"}`}>{channelName} #{channelID}</span>\n                <span className={`font-bold text-center ${mobileView ? \"text-base\": \"text-xl\"} cursor-pointer`} onClick={handleClick}>+ Add Member</span>\n            </div>\n\n            <div className=\"p-4 h-screen max-h-90 overflow-y-scroll\">\n                {loading ? \n                <div className=\"text-center my-10\"> Fetching Messages </div>\n                : \n                listOfMessages.map((message) => \n                <div className={message.sender.uid===userHeaders.uid ? `ml-auto mr-0 ${mobileView ? \"w-4/6\" : \"w-2/6\" }` : `ml-0 mr-auto ${mobileView ? \"w-4/6\" : \"w-2/6\" }`}>\n                    <div className={message.sender.uid===userHeaders.uid ? \"m-3 font-semibold text-right\" : \"m-3 font-semibold\"}>{message.sender.uid===userHeaders.uid ? \"You\" :message.sender.uid}</div>\n                    <div className={message.sender.uid===userHeaders.uid ? \"border-solid rounded-md border-purple-300 border-2 text-lg p-4 m-3 bg-purple-500 text-white\" : \"bg-purple-900 border-solid rounded-md border-purple-300 border-2 text-lg p-4 m-3 text-white\"}>\n                            <span>{message.body}</span>\n                    </div>\n                </div>\n                )\n                }\n                <div className=\"h-px w-px\" ref={endOfMessages}> </div>\n            </div>\n                \n\n            <div className=\"p-4\">\n                <textarea className=\"border-solid border-purple-300 border-2 resize-none w-full h-40 p-4\" name=\"message\" onChange={handleChange} onKeyPress={e=>onKeyHandleSentMessage(e)} value={message}></textarea>\n                <button className=\"bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded\" onClick={handleSentMessage}>\n                    Send Message\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Channel\n","import {useEffect,useState, useRef} from 'react'\nfunction DirectMessage(props) { \n\n    const {recipientName,recipientID,listOfMessages,userHeaders,setListOfMessages, counter2, setCounter2} = props\n    const [message,setMessage] = useState(\"\")\n    const [value,setValue] = useState(0)\n    const [loading,setLoading] = useState()\n    const endOfMessages2 = useRef(null)\n    \n    function handleChange(e){\n        setMessage(e.target.value)\n    }\n    \n    async function sendMessage(body){\n        await fetch(\"http://206.189.91.54/api/v1/messages\",\n            {method: \"POST\",\n            headers: userHeaders, \n            mode:\"cors\",\n            body: JSON.stringify(body)})\n        .then(response=>response.json())\n        .then(data=>{\n            setValue(value=>value+1)\n            console.log(data)})\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    function handleSentMessage(){\n        const body={\n            \"receiver_id\": recipientID, // UserID\n            \"receiver_class\": \"User\",\n            \"body\": message\n        }\n        sendMessage(body)\n        setMessage(\"\")\n    }\n\n    function handleSentMessageEnterKey(e){\n        if (e.key === 'Enter') {\n        e.preventDefault()\n        const body={\n            \"receiver_id\": recipientID, // UserID\n            \"receiver_class\": \"User\",\n            \"body\": message\n        }\n        sendMessage(body)\n        setMessage(\"\")\n        }\n    }\n\n    async function retrieveMessages(){\n        await fetch(`http://206.189.91.54/api/v1/messages?receiver_id=${recipientID}&receiver_class=User`,\n        {method: \"GET\",\n        headers: userHeaders, \n        mode:\"cors\"})\n        .then(response=>response.json())\n        .then(data=> {\n            if(data.data.length!==0){\n                const messagesData = data.data\n                let tempListOfMessages = []\n                messagesData.forEach(message => {\n                    tempListOfMessages.push(message)\n                    console.log(message)\n                })\n                setListOfMessages(tempListOfMessages)\n            } else {\n                console.log(\"NO MESSAGES\")\n            }\n            setLoading(false)\n        })\n        .catch((error) => {\n            console.log(error)\n        }) \n    }\n\n    useEffect( ()=>{\n        retrieveMessages()\n        console.log(\"I RAN\")\n    },[recipientName,value])\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCounter2(counter2 + 1)\n            retrieveMessages()\n        }, 5000);\n        return () => {\n          clearInterval(interval);\n        };\n      }, [counter2, recipientID]);\n\n    const scrollToBottom = () => {\n        endOfMessages2.current?.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    useEffect(()=>{\n        scrollToBottom()\n    },[listOfMessages])\n\n    return (\n        <div className=\"h-full flex flex-col justify-between max-h-screen\">\n            <div className=\"border-solid border-purple-300 border-2 bg-white p-3 flex justify-between\">\n                <span className=\"font-bold text-3xl\">{recipientName} #{recipientID}</span>\n            </div>\n\n            <div className=\" p-4 h-screen max-h-90 overflow-y-scroll\">\n                {loading ? \n                <div className=\"text-center my-10\"> Fetching Messages </div>\n                : \n                listOfMessages.map((message) => \n                <div className={message.sender.uid===userHeaders.uid ? \"ml-auto mr-0 w-2/6\" : \"ml-0 mr-auto w-2/6\"}>\n                    <div className={message.sender.uid===userHeaders.uid ? \"m-3 font-semibold text-right\" : \"m-3 font-semibold\"}>{message.sender.uid}</div>\n                    <div className={message.sender.uid===userHeaders.uid ? \"border-solid rounded-md border-purple-300 border-2 text-lg p-4 m-3 bg-purple-700 text-white\" : \"bg-purple-800 border-solid rounded-md border-purple-300 border-2 text-lg p-4 m-3 text-white\"}>\n                            <span>{message.body}</span>\n                    </div>\n                </div>\n                )\n                }\n                <div className=\"h-px w-px\" ref={endOfMessages2}> </div>\n            </div>\n                \n\n            <div className=\"p-4\">\n                <textarea className=\"border-solid border-purple-300 border-2 resize-none w-full h-40 p-4\" name=\"message\" onChange={handleChange} onKeyPress={handleSentMessageEnterKey} value={message}></textarea>\n                <button class=\"bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded\" onClick={handleSentMessage}>\n                    Send Message\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default DirectMessage\n","import { useHistory } from \"react-router\"\n\nfunction Welcome(props) {\n    const {userId,setCurrentUser,mobileView,setActivePage,setShowMenu} = props\n\n    let history = useHistory()\n    \n    function onLogout(){\n        history.push(\"/\")\n        setCurrentUser({})\n    }\n\n    function showAddChannel(){\n        setActivePage(\"AddChannel\")\n        setShowMenu(false)\n    }\n\n\n    return (\n        <div className=\"flex flex-col w-full px-2\">\n           <span className=\"text-3xl font-bold text-center mt-20\">Welcome to your Dashboard!</span>\n        \n           <span className=\"text-xl text-center font-semibold\">Your Account ID is #{userId}</span>\n\n           <span className=\"text-center italic m-20\">\"Avion Chat helps you connect with your community anytime, anywhere!\"</span>\n\n           <button onClick={showAddChannel} className={`bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 m-10 rounded ${mobileView ? \"w-2/4\" : \"w-1/4\"} mx-auto`}>\n                Create A Channel\n            </button>\n\n           <button onClick={onLogout} className={`bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded ${mobileView ? \"w-2/4\" : \"w-1/4\"} mx-auto`}>\n                Switch Account\n            </button>\n        </div>\n    )\n}\n\nexport default Welcome\n","import React from 'react'\n\nfunction AlertWindow(props) {\n    const {mobileView,alertMessage,alertWindowVisible,setAlertWindowVisible} = props\n\n    function hideAlert(){\n        setAlertWindowVisible(false)\n    }\n\n    return (\n        <div className={`w-full h-full bg-gray-300 bg-opacity-50 pt-24 ${alertWindowVisible ? \"absolute\" : \"hidden\"}`}>\n            <div className={`${mobileView ? \"w-1/2\": \"w-1/4\"} rounded-md overflow-hidden m-auto`}>   \n                <div className=\"flex bg-purple-800 text-white py-1 px-4 font-bold\">\n                    <span className=\"mr-0 ml-auto cursor-pointer\" onClick={hideAlert}>X</span>\n                </div>\n                <div className=\"bg-white p-4 text-center \">\n                    {alertMessage}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AlertWindow\n","import AddChannel from \"../AddChannel\"\nimport AddMember from \"../AddMember\"\nimport Channel from \"../Channel\"\nimport DirectMessage from \"../DirectMessage\"\nimport Welcome from \"../Welcome\"\nimport AlertWindow from \"../AlertWindow\"\nimport {useState} from \"react\"\n\nfunction Maincontent(props) {\n\n    const {activePage, userHeaders, userId, setValue,value,channelName,channelID,recipientName,recipientID,listOfMessages,setListOfMessages,setActivePage, counter, setCounter, mobileView,setCurrentUser,setShowMenu,  counter2, setCounter2} = props\n    const [alertWindowVisible,setAlertWindowVisible] = useState(false)\n    const [alertMessage,setAlertMessage] = useState(\"No Alert Message\")\n\n    return (\n        <div className={`${mobileView ? \"w-full relative\": \"w-10/12 relative\"} bg-gray-200`}>\n            <AlertWindow mobileView={mobileView} alertMessage={alertMessage} alertWindowVisible={alertWindowVisible} setAlertWindowVisible={setAlertWindowVisible}/>\n            {activePage===\"AddChannel\" && <AddChannel userHeaders={userHeaders} userId={userId} setValue={setValue} value={value} setAlertMessage={setAlertMessage} setAlertWindowVisible={setAlertWindowVisible}/>}\n            {activePage===\"Channel\" && <Channel channelName={channelName} channelID={channelID} listOfMessages={listOfMessages} setListOfMessages={setListOfMessages} userHeaders={userHeaders} setActivePage={setActivePage} counter={counter} setCounter={setCounter} mobileView={mobileView}/>}\n            {activePage===\"AddMember\" && <AddMember channelID={channelID} userHeaders={userHeaders} setAlertMessage={setAlertMessage} setAlertWindowVisible={setAlertWindowVisible}/>}\n            {activePage===\"DirectMessage\" && <DirectMessage recipientName={recipientName} recipientID={recipientID} listOfMessages={listOfMessages} setListOfMessages={setListOfMessages} userHeaders={userHeaders} counter={counter2} setCounter2={setCounter2}/>}\n            {activePage===\"Welcome\" && <Welcome userId={userId} setCurrentUser={setCurrentUser} mobileView={mobileView} setShowMenu={setShowMenu} setActivePage={setActivePage} counter2={counter2} setCounter2={setCounter2} />}\n        </div>\n    )\n}\n\nexport default Maincontent\n","import Header from \"./dashboard-components/Header\"\nimport Sidebar from \"./dashboard-components/Sidebar\"\nimport {Redirect } from \"react-router\"\nimport Maincontent from \"./dashboard-components/Maincontent\"\nimport {useState} from \"react\"\nimport Media from \"react-media\"\n\nfunction Dashboard (props) {\n    const {currentUser, setCurrentUser} = props\n    const [activePage, setActivePage] = useState(\"Welcome\")\n    const userInfo = JSON.parse(localStorage.getItem('currentUser'))\n    const [value,setValue] = useState(0 )\n    const [channelName,setChannelName] = useState(\"\")\n    const [channelID,setChannelID] = useState()\n    const [recipientName, setRecipientName] = useState(\"\") //copy of channelName state for DM\n    const [recipientID, setRecipientID] = useState() //copy of channelID state for DM\n    const [listOfMessages,setListOfMessages] = useState([])\n    const [counter, setCounter] = useState(0)\n    const [counter2, setCounter2] = useState(0)\n    const [showMenu,setShowMenu] = useState(false)\n    const userHeaders = currentUser ? currentUser.headers : {}\n    const userId = currentUser.data ? currentUser.data.id : \"\"\n    let greetings = currentUser.data ? `Hello, ${currentUser.data.email}!` : \"\"\n\n    if(Object.keys(currentUser).length === 0) {\n        return <Redirect to=\"/\"/>\n    } else {\n        return (\n            <>\n\n            \n\n            <Media query=\"(max-width: 1332px)\">\n                {matches => (matches && \n                    <>\n                        <div className=\"flex flex-col h-screen\">\n                            <Header mobileView={true} showMenu={showMenu} setShowMenu={setShowMenu} greetings={greetings}/>\n                            <div className=\"flex flex-grow\">\n                                <Maincontent activePage={activePage} userHeaders={userHeaders} userId={userId} setValue={setValue} value={value} channelName={channelName} recipientName={recipientName} channelID={channelID} recipientID={recipientID} listOfMessages={listOfMessages} setListOfMessages={setListOfMessages} setActivePage={setActivePage} counter = {counter} setCounter = {setCounter} mobileView={true} setChannelName={setChannelName} setRecipientName={setRecipientName} setChannelID={setChannelID} setRecipientID={setRecipientID} showMenu={showMenu} setShowMenu={setShowMenu} setCurrentUser={setCurrentUser} setShowMenu={setShowMenu} counter2={counter2} setCounter2={setCounter2}/>\n                                <Sidebar userHeaders={userHeaders} setActivePage={setActivePage} value={value} setChannelName={setChannelName} setRecipientName={setRecipientName} setChannelID={setChannelID} setRecipientID={setRecipientID} setListOfMessages={setListOfMessages} counter = {counter} setCounter = {setCounter} showMenu={showMenu} mobileView={true} setShowMenu={setShowMenu} counter2= {counter2} setCounter2={setCounter2} greetings={greetings} currentUser={currentUser} setCurrentUser={setCurrentUser}/>\n                            </div>\n                        </div> \n                    </>\n\n                )}\n            </Media>\n\n            <Media query=\"(min-width: 1333px)\">\n                {matches => (matches && \n                \n                    <div className=\"flex flex-col h-screen\">\n                        <Header mobileView={false} showMenu={showMenu} setShowMenu={setShowMenu} greetings={greetings}/>\n                        <div className=\"flex flex-grow\">\n                            <Sidebar userHeaders={userHeaders} setActivePage={setActivePage} value={value} setChannelName={setChannelName} setRecipientName={setRecipientName} setChannelID={setChannelID} setRecipientID={setRecipientID} setListOfMessages={setListOfMessages} counter = {counter} setCounter = {setCounter} mobileView = {false} showMenu={showMenu} setShowMenu={setShowMenu} counter2={counter2} setCounter2={setCounter2} greetings={greetings} currentUser={currentUser} setCurrentUser={setCurrentUser}/>\n                            <Maincontent activePage={activePage} userHeaders={userHeaders} userId={userId} setValue={setValue} value={value} channelName={channelName} recipientName={recipientName} channelID={channelID} recipientID={recipientID} listOfMessages={listOfMessages} setListOfMessages={setListOfMessages} setActivePage={setActivePage} counter = {counter} setCounter = {setCounter} mobileView={false} setCurrentUser={setCurrentUser} setShowMenu={setShowMenu} counter2={counter2} setCounter2={setCounter2}/>\n                        </div>\n                    </div> \n                \n                )}\n            </Media>\n\n            </>\n\n        )\n    }\n\n}\nexport default Dashboard","import {useHistory } from 'react-router';\n\n\nfunction Login(props){\n  const {setCurrentUser, emailLogInInput, passwordLogInput, logInReminder, setLogInReminder, logInVisiblity, setLogInVisibility, signUpVisibity, setSignUpVisibility, onTransition } = props\n  let history = useHistory()\n\n\n  async function logInUser(event){\n    event.preventDefault()\n    //gets information for api call from values of inputs (email, password)\n    let body = {\n      \"email\": emailLogInInput.current.value,\n      \"password\": passwordLogInput.current.value\n    }\n    let url = \"https://slackapi.avionschool.com/api/v1/auth/sign_in/\"\n    let headersList =  [\"access-token\", \"client\", \"expiry\", \"uid\"]\n\n    //fetches api using information from body and stores response in \"userData\"\n    const user = await fetch(url,\n    {method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n      }, \n    mode:\"cors\",\n      body: JSON.stringify(body)})\n    let userData = await user.json()\n\n    // runs only if sign up was successful (determined using response status)\n    if(user.status >= 200 && user.status<=299 ){\n      let headers = await user.headers\n      let head = Array.from(headers.entries()).reduce((headers,pair) => {\n        if(headersList.includes(pair[0])){\n          return {\n            ...headers,\n            [pair[0]]: pair[1]\n          }\n        } else {\n          return headers\n        }\n      },{})\n\n      //updates currentUser data and stores both the user data and login response headers\n      setCurrentUser({\n        ...userData, \n        \"headers\" : head\n      })\n      //redirects the page to dashboard\n      history.push(\"/dashboard\")\n    } else {\n      //if api call is unsuccessful, the error is displayed\n      setLogInReminder(userData.errors[0])\n    }\n  }\n\n  function logInvisible(){\n    setSignUpVisibility(\"visible\")\n    setLogInVisibility(\"invisible\")\n  }\n\n\n  return (\n  <div className={`lg:min-h-full absolute lg:items-center lg:justify-center py-12 px-4 sm:px-6 lg:px-8 lg:visible ${logInVisiblity} sm:w-96 w-full h-min border border-transparent m`}>\n      <div className=\"sm:max-w-md w-full space-y-8\">\n        <div classname=\"w-full\">\n          <img\n            className=\"mx-auto h-12 w-auto\"\n            src=\"http://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\"\n            alt=\"Workflow\"\n          />\n\n\n\n          \n          <h2 className=\"p-0 mt-6 text-center sm:text-3xl text-2xl font-extrabold text-gray-900\">Log in to your account</h2>\n        </div>\n        <div><h2>{logInReminder}</h2></div>\n        <form className=\"mt-8 space-y-6\" action=\"#\" method=\"POST\">\n          <input type=\"hidden\" name=\"remember\" defaultValue=\"true\" />\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email address\n              </label>\n              <input\n                ref={emailLogInInput}\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email address\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Password\n              </label>\n              <input\n                ref={passwordLogInput}\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Password\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember-me\"\n                name=\"remember-me\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\n                Remember me\n              </label>\n            </div>\n\n            {/* <div className=\"text-sm\">\n              <a href=\"#\" className=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                Forgot your password?\n              </a>\n            </div> */}\n          </div>\n\n          <div>\n            <button\n            onClick={logInUser}\n              type=\"submit\"\n                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              Log in\n            </button>\n\n            <button\n            onClick={onTransition}\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-indigo-600 text-sm font-medium rounded-md text-indigo bg-white my-2 lg:invisible\"\n            >\n              Sign up\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\nexport default Login","import { useState } from \"react/cjs/react.development\"\n\n\nfunction Signup(props){\n  const {emailSignUpInput, passwordSignUpInput, confirmSignUpInput, signUpReminder, setSignUpReminder, setHomeState, emailLogInInput, passwordLogInput, setLogInReminder, logInVisiblity, setLogInVisibility, signUpVisibility, setSignUpVisibility, onTransition} = props\n\n  // const [newLoginInput, setNewLoginInput] = useState(\"\")\n  //RegisterUser function for when the sign up button is clicked\n  async function registerUser(event){\n    event.preventDefault()\n    //gets information for api call from values of inputs (email, password, confirmpassword)\n    let body = {\n      \"email\": emailSignUpInput.current.value,\n      \"password\": passwordSignUpInput.current.value,\n      \"password_confirmation\": confirmSignUpInput.current.value\n    }\n    let url = \"https://slackapi.avionschool.com/api/v1/auth/\"\n\n    //fetches api using information from body and stores response in \"userData\"\n    const user = await fetch(url,\n      {method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      }, \n      body: JSON.stringify(body)})\n    let userData = await user.json()\n    \n    // runs only if sign up was successful (determined using response status)\n    if(user.status >= 200 && user.status<=299 ){\n      let email =emailSignUpInput.current.value \n      let password =  passwordSignUpInput.current.value\n      setTimeout(() => {\n        let loginState =  {\n          state: \"login\",\n          buttonText: \"Sign Up\",\n          captionText: \"Don't have an Account?\",\n          transitionClass: \"translate-x-0 \"\n        }\n        setHomeState(loginState)\n        setLogInReminder(\"Sign up was successful. You may now log in.\")\n        emailLogInInput.current.value = email\n        passwordLogInput.current.value = password\n        \n        //switches pane to login if signup was successful and adds reminder\n        emailLogInInput.current.focus()\n      }, 300)\n\n    } else {\n      //if api call is unsuccessful, the error is displayed\n      setSignUpReminder(userData.errors.full_messages[0])\n    }\n  }\n  function onSignupEnter(e){\n    if(e.key===\"Enter\"){\n      e.preventDefault()\n      registerUser(e)\n    }\n  }\n\n  function signUpVisible() {\n    setSignUpVisibility(\"invisible\")\n    setLogInVisibility(\"visible\")\n  }\n\n  return (\n  <div className={`lg:min-h-full absolute lg:items-center lg:justify-center py-12 px-4 sm:px-6 lg:px-8 lg:visible w-full h-full h-min border border-transparent`}>\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <img\n            className=\"mx-auto h-12 w-auto\"\n            src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\"\n            alt=\"Workflow\"\n          />\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Create your account</h2>\n        </div>\n        <div><h2>{signUpReminder}</h2></div>\n        <form className=\"mt-8 space-y-6\" action=\"#\" method=\"POST\">\n          <input type=\"hidden\" name=\"remember\" defaultValue=\"true\" />\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email address\n              </label>\n              <input\n                onKeyPress={e=>onSignupEnter(e)}\n                ref={emailSignUpInput}\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email address\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Password\n              </label>\n              <input\n                onKeyPress={e=>onSignupEnter(e)}\n                ref={emailSignUpInput}\n                ref={passwordSignUpInput}\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Confirm Password\n              </label>\n              <input\n                onKeyPress={e=>onSignupEnter(e)}\n                ref={emailSignUpInput}\n                ref={confirmSignUpInput}\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Confirm Password\"\n              />\n            </div>\n          </div>\n\n\n          <div>\n            <button\n            onClick={registerUser}\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              Sign up\n            </button>\n            <button\n            onClick={onTransition}\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-indigo-600 text-sm font-medium rounded-md text-indigo bg-white my-2 lg:invisible\"\n            >\n              Log In\n            </button>\n          </div>\n          \n        </form>\n      </div>\n    </div>\n  )\n}\nexport default Signup","import { useState, useRef } from 'react';\nimport { Redirect } from 'react-router';\nimport Login from './Login';\nimport Signup from './Signup';\n\n\n\nfunction Home(props){\n  const {currentUser, setCurrentUser} = props\n  const [logInReminder, setLogInReminder] = useState(\"\")\n  const [signUpReminder, setSignUpReminder] = useState(\"\")\n  const emailLogInInput = useRef(\"\")\n  const passwordLogInput = useRef(\"\")\n  const emailSignUpInput = useRef(\"\")\n  const passwordSignUpInput = useRef(\"\")\n  const confirmSignUpInput = useRef(\"\")\n  const [logInVisiblity, setLogInVisibility] = useState(\"visible\")\n  const [signUpVisibility, setSignUpVisibility] = useState(\"invisible\")\n  \n  //Set up for information to be displayed in the moving panel\n  let signupState = {\n    state: \"signup\",\n    buttonText: \"Log In\",\n    captionText: \"Already have an Account?\",\n    transitionClass: \"lg:-translate-x-full lg:rounded-l-lg \",\n    transitionClass2: \"lg:translate-x-full lg:rounded-l-lg \"\n  }\n  let loginState =  {\n    state: \"login\",\n    buttonText: \"Sign Up\",\n    captionText: \"Don't have an Account?\",\n    transitionClass: \"lg:translate-x-0 lg:rounded-r-lg\",\n    transitionClass2: \"lg:translate-x-0 lg:rounded-r-lg\"\n  }\n  const [homeState, setHomeState] = useState(loginState)\n  \n  \n  //Transition function for when the user wants to shift from logging in to signing up, and vice-versa\n  function onTransition() {\n    setLogInReminder(\"\")\n    setSignUpReminder(\"\")\n\n    if(homeState.state===\"login\"){\n      setHomeState(signupState)\n    } else {\n      setHomeState(loginState)\n    }\n  }\n\n  if(Object.keys(currentUser).length === 0){\n    return (\n    <div className='flex h-full w-full bg-gradient-to-t from-indigo-500 to-gray-100 items-center justify-center'>\n      <div className = \"lg:border-8 lg:border-none bg-white rounded-lg absolute sm:w-1/2 sm:h-1/2 lg:h-100 lg:w-100 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-full flex justify-center items-center\">\n        <div className= {`h-44 w-50 border-8 border-none absolute right-0 z-10 bg-indigo-50 text-center h-full transform transition-all delay-200 ease-in-out duration-700 ${homeState.transitionClass} lg:block hidden`} >\n          <h2 className=\"mt-6 text-center text-2xl font-extrabold text-gray-900\">{homeState.captionText}</h2>\n\n          <button\n            onClick={onTransition}\n            type=\"submit\"\n            className=\"group relative w-1/2 flex justify-center m-auto my-4 py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 \"\n            >\n            {homeState.buttonText}\n          </button>\n        </div>\n        <div className= {`h-44 w-full sm:w-50 border-8 border-none absolute left-0 z-0 bg-indigo-50 text-center h-full transform transition-all delay-200 ease-in-out duration-700 ${homeState.transitionClass2} lg:visible`} >\n          { homeState.state ===\"login\" ? <Login\n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              emailLogInInput={emailLogInInput}\n              passwordLogInput={passwordLogInput}\n              logInReminder={logInReminder}\n              setLogInReminder={setLogInReminder}\n              logInVisiblity = {logInVisiblity}\n              setLogInVisibility = {setLogInVisibility}\n              signUpVisibility = {signUpVisibility}\n              setSignUpVisibility = {setSignUpVisibility}\n              onTransition = {onTransition}\n              /> : <Signup\n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              emailSignUpInput={emailSignUpInput}\n              passwordSignUpInput={passwordSignUpInput}\n              confirmSignUpInput={confirmSignUpInput}\n              signUpReminder={signUpReminder}\n              setSignUpReminder={setSignUpReminder}\n              setHomeState={setHomeState}\n              emailLogInInput={emailLogInInput}\n              passwordLogInput={passwordLogInput}\n              setLogInReminder={setLogInReminder}\n              logInVisiblity = {logInVisiblity}\n              setLogInVisibility = {setLogInVisibility}\n              signUpVisibility = {signUpVisibility}\n              setSignUpVisibility = {setSignUpVisibility}\n              onTransition  = {onTransition}\n              />\n\n          }\n        </div>\n      </div>\n    </div>\n    )\n  } else {\n    return <Redirect to=\"/dashboard\"/>\n  }\n}\nexport default Home","import './css/App.css';\nimport Dashboard from './js/Dashboard';\nimport React, { useState, useEffect } from \"react\";\nimport Home from './js/Home'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  \n\n  //gets \"currentUser\" data stored in local storage if there is any and saves it to currentUser state\n  const localStorageCurrentUser = localStorage.getItem(\"currentUser\")\n  let currentUserData = {}\n  if(localStorageCurrentUser) {\n    currentUserData = JSON.parse(localStorageCurrentUser)\n  }\n  const [currentUser, setCurrentUser] = useState(currentUserData)\n\n  //saves changes to localstorage.currentUser whenever there are change to currentUser state\n  useEffect(()=>{\n    localStorage.setItem(\"currentUser\",JSON.stringify(currentUser))\n  },[currentUser])\n\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    <div className='h-full w-full'>\n\n      <Switch>\n        <Route exact path=\"/\" component={() => <Home \n        currentUser={currentUser}\n        setCurrentUser={setCurrentUser}\n        />}>\n        </Route>\n        <Route path=\"/dashboard\" component={() => <Dashboard \n        currentUser={currentUser}\n        setCurrentUser={setCurrentUser}\n        />}>\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}